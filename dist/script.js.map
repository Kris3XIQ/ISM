{"version":3,"sources":["script.js"],"names":["navbarScrollFunctionality","window","addEventListener","header","document","querySelector","headerLogo","getElementsByClassName","classList","toggle","scrollY","style","display","switchLightDarkMode","body","themeSwitch","getElementById","userPreferDarkMode","matchMedia","matches","userPreferLightMode","console","log","e","toggleTheme","contains","HomePageSlider","slideInterval","indicators","querySelectorAll","slides","currentSlide","nextSlide","goToSlide","initiateSlide","s","className","length","setInterval","autoplay","autorun","remove","add","pauseSlideshow","playSlideshow","clearInterval","previous_btn","onclick","forEach","indicator","i","scrollToTop","button","scrollTop","documentElement"],"mappings":"AAAA,aAGA,IAAMA,0BAA4B,WAC9BC,OAAOC,iBAAiB,UAAU,WAC9B,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAAaF,SAASG,uBAAuB,gBAEnDJ,EAAOK,UAAUC,OAAO,SAAUR,OAAOS,QAAU,GACnDT,OAAOS,QAAU,EAAKJ,EAAW,GAAGK,MAAMC,QAAU,OAAWN,EAAW,GAAGK,MAAMC,QAAU,OAO/FC,oBAAsB,WACxB,IAAMC,EAAOV,SAASC,cAAc,QAC9BU,EAAcX,SAASY,eAAe,0BACtCC,EAAqBhB,OAAOiB,YAAcjB,OAAOiB,WAAW,gCAAgCC,QAC5FC,EAAsBnB,OAAOiB,YAAcjB,OAAOiB,WAAW,iCAAiCC,QACjGF,IACCI,QAAQC,IAAI,iCACZR,EAAKN,UAAY,QAElBY,IACCC,QAAQC,IAAI,kCACZR,EAAKN,UAAY,SAErBO,EAAYb,iBAAiB,SAAS,SAACqB,GACnCC,OAEJ,IAAMA,EAAc,WACZV,EAAKN,UAAUiB,SAAS,SACxBX,EAAKN,UAAUC,OAAO,QACtBK,EAAKN,UAAUC,OAAO,UACfK,EAAKN,UAAUiB,SAAS,WAC/BX,EAAKN,UAAUC,OAAO,SACtBK,EAAKN,UAAUC,OAAO,WAQ5BiB,eAAiB,WACnB,IAcIC,EAdEC,EAAaxB,SAASyB,iBAAiB,mDACzCC,EAAS1B,SAASyB,iBAAiB,6BACnCE,EAAe,EAEbC,EAAY,WACdC,EAAUF,EAAe,IAQzBG,GAAgB,EAEdD,EAAY,SAACE,GACfL,EAAOC,GAAcK,UAAY,QACjCR,EAAWG,GAAcK,UAAY,YACrCL,GAAgBI,EAAIL,EAAOO,QAAUP,EAAOO,OAC5CP,EAAOC,GAAcK,UAAY,eACjCR,EAAWG,GAAcK,UAAY,mBAChCF,IACDP,EAAgBW,YAAYN,EAAW,KACvCE,GAAgB,IAInBA,GACDD,EAAUF,GAId,IAAMQ,EAAWnC,SAASC,cAAc,6CACpCmC,GAAU,EACdD,EAASrC,iBAAiB,SAAS,WAC3BsC,GACAD,EAAS/B,UAAUiC,OAAO,WAC1BF,EAAS/B,UAAUkC,IAAI,UACvBC,MAEAJ,EAAS/B,UAAUiC,OAAO,UAC1BF,EAAS/B,UAAUkC,IAAI,WACvBE,QAIR,IAAMD,EAAiB,WACnBH,GAAU,EACVK,cAAclB,IAEZiB,EAAgB,WAClBJ,GAAU,EACVb,EAAgBW,YAAYN,EAAW,MAIvCc,EAAe1C,SAASC,cAAc,2CAC3BD,SAASC,cAAc,uCAC7B0C,QAAU,WACfJ,IACAX,KAEJc,EAAaC,QAAU,WACnBJ,IAvDAV,EAAUF,EAAe,IA4D7BH,EAAWoB,SAAQ,SAACC,EAAWC,GAC3BD,EAAU/C,iBAAiB,SAAS,WAEhC+B,EADQiB,GAER9C,SAASC,cAAc,sBAAsBG,UAAUiC,OAAO,UAC9DQ,EAAUzC,UAAUkC,IAAI,iBAM9BS,YAAc,WAChBC,OAAShD,SAASY,eAAe,qBACjCZ,SAASU,KAAKuC,UAAY,EAC1BjD,SAASkD,gBAAgBD,UAAY,GAGzCxC,sBACAb,4BACA0B","file":"script.js","sourcesContent":["/*\r\n    => Navbar Functionality <=\r\n*/\r\nconst navbarScrollFunctionality = () => {\r\n    window.addEventListener(\"scroll\", function(){\r\n        const header = document.querySelector('header');\r\n        const headerLogo = document.getElementsByClassName(\"header__logo\");\r\n\r\n        header.classList.toggle(\"sticky\", window.scrollY > 0);\r\n        window.scrollY > 0 ? (headerLogo[0].style.display = \"none\") : (headerLogo[0].style.display = \"\");\r\n    \r\n    });\r\n}\r\n/* \r\n    => Light/Dark --mode button, built into the navbar <=\r\n*/\r\nconst switchLightDarkMode = () => {\r\n    const body = document.querySelector('body');\r\n    const themeSwitch = document.getElementById('theme-switch-container');\r\n    const userPreferDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    const userPreferLightMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches;\r\n    if(userPreferDarkMode){\r\n        console.log(\"User prefers a dark interface\");\r\n        body.classList = \"dark\";\r\n    }\r\n    if(userPreferLightMode){\r\n        console.log(\"User prefers a light interface\");\r\n        body.classList = \"light\";\r\n    }\r\n    themeSwitch.addEventListener('click', (e) => {\r\n        toggleTheme();\r\n    })\r\n    const toggleTheme = () => {\r\n        if (body.classList.contains(\"dark\")) {\r\n            body.classList.toggle(\"dark\");\r\n            body.classList.toggle(\"light\");\r\n        } else if (body.classList.contains(\"light\")) {\r\n            body.classList.toggle(\"light\");\r\n            body.classList.toggle(\"dark\");\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    => Slideshow Functinality <=\r\n*/\r\nconst HomePageSlider = () => {\r\n    const indicators = document.querySelectorAll('.slideshow__controlls__indicators ul .indicator');\r\n    let slides = document.querySelectorAll('#slideshow__slides .slide');\r\n    let currentSlide = 0;\r\n\r\n    const nextSlide = () => {\r\n        goToSlide(currentSlide + 1);\r\n    }\r\n    const previousSlide = () => {\r\n        goToSlide(currentSlide - 1);\r\n    }\r\n\r\n    // Which slide to go to, denoted to s &\r\n    // Set Slider Interval and initiate the slideshow (to remove onload delay)\r\n    let initiateSlide = false;\r\n    let slideInterval;\r\n    const goToSlide = (s) => {\r\n        slides[currentSlide].className = 'slide';\r\n        indicators[currentSlide].className = 'indicator';\r\n        currentSlide = (s + slides.length) % slides.length;\r\n        slides[currentSlide].className = 'slide active';\r\n        indicators[currentSlide].className = 'indicator active';\r\n        if (!initiateSlide) {\r\n            slideInterval = setInterval(nextSlide, 4000);\r\n            initiateSlide = true;\r\n        }\r\n    }\r\n    \r\n    if (!initiateSlide) {\r\n        goToSlide(currentSlide);\r\n    }\r\n\r\n    // Autoplay play/pause functionality\r\n    const autoplay = document.querySelector('.slideshow__controlls__autoplay .autoplay');\r\n    let autorun = true;\r\n    autoplay.addEventListener('click', () => {\r\n        if (autorun){ \r\n            autoplay.classList.remove(\"playing\");\r\n            autoplay.classList.add(\"paused\");\r\n            pauseSlideshow(); \r\n        } else {\r\n            autoplay.classList.remove(\"paused\");\r\n            autoplay.classList.add(\"playing\");\r\n            playSlideshow();\r\n        }\r\n    });\r\n\r\n    const pauseSlideshow = () => {\r\n        autorun = false;\r\n        clearInterval(slideInterval);\r\n    }\r\n    const playSlideshow = () => {\r\n        autorun = true;\r\n        slideInterval = setInterval(nextSlide, 4000);\r\n    }\r\n\r\n    // Slideshow button(arrow) functionality\r\n    let previous_btn = document.querySelector('.slideshow__controlls__arrows .previous');\r\n    let next_btn = document.querySelector('.slideshow__controlls__arrows .next');\r\n    next_btn.onclick = () => {\r\n        pauseSlideshow();\r\n        nextSlide();\r\n     };\r\n    previous_btn.onclick = () => {\r\n        pauseSlideshow();\r\n        previousSlide();\r\n    };\r\n\r\n    let index = 0;\r\n    indicators.forEach((indicator, i) => {\r\n        indicator.addEventListener('click', () => {\r\n            index = i;\r\n            goToSlide(index)\r\n            document.querySelector('.indicator .active').classList.remove('active');\r\n            indicator.classList.add('active');\r\n        });\r\n    });\r\n}\r\n\r\n// Footer button, scroll to top\r\nconst scrollToTop = () => {\r\n    button = document.getElementById(\"scrollToTopButton\");\r\n    document.body.scrollTop = 0; // Safari\r\n    document.documentElement.scrollTop = 0; //Chrome, Firefox, IE & Opera\r\n}\r\n\r\nswitchLightDarkMode();\r\nnavbarScrollFunctionality();\r\nHomePageSlider();"]}